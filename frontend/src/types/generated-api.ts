/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/companies/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Companies
         * @description Get all companies for the authenticated user.
         *
         *     - **skip**: Number of companies to skip (for pagination)
         *     - **limit**: Maximum number of companies to return (1-1000)
         */
        get: operations["get_companies_api_companies__get"];
        put?: never;
        /**
         * Create a new company
         * @description Create a new company record for the authenticated user with analysis data.
         */
        post: operations["create_company_api_companies__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/companies/{company_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Company
         * @description Get a specific company by ID.
         *
         *     Only returns companies owned by the authenticated user.
         */
        get: operations["get_company_api_companies__company_id__get"];
        /**
         * Update Company
         * @description Update a company.
         *
         *     Only updates companies owned by the authenticated user.
         *     All fields are optional - only provided fields will be updated.
         */
        put: operations["update_company_api_companies__company_id__put"];
        post?: never;
        /**
         * Delete Company
         * @description Delete a company and all related data.
         *
         *     Only deletes companies owned by the authenticated user.
         *     This will cascade delete all accounts, personas, and campaigns.
         */
        delete: operations["delete_company_api_companies__company_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/companies/{company_id}/relations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Company With Relations
         * @description Get a company with all related accounts.
         *
         *     Only returns companies owned by the authenticated user.
         *     Includes nested account data.
         */
        get: operations["get_company_with_relations_api_companies__company_id__relations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/companies/generate-ai": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * AI Generate Company Overview (features, company & persona profiles, pricing)
         * @description AI-generate a company overview for authenticated users (Stack Auth JWT required).
         */
        post: operations["prod_generate_product_overview_api_companies_generate_ai_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/accounts/generate-ai": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * AI Generate Target Account Profile (discovery call preparation)
         * @description AI-generate a target account profile for authenticated users (Stack Auth JWT required).
         */
        post: operations["prod_generate_target_account_api_accounts_generate_ai_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Accounts
         * @description Get all accounts for a company.
         */
        get: operations["get_accounts_api_accounts_get"];
        put?: never;
        /**
         * Create Account
         * @description Create a new account for a company.
         */
        post: operations["create_account_api_accounts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/accounts/{account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Account
         * @description Get a specific account by ID.
         */
        get: operations["get_account_api_accounts__account_id__get"];
        /**
         * Update Account
         * @description Update an account.
         */
        put: operations["update_account_api_accounts__account_id__put"];
        post?: never;
        /**
         * Delete Account
         * @description Delete an account and all related data.
         */
        delete: operations["delete_account_api_accounts__account_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/accounts/{account_id}/relations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Account With Relations
         * @description Get an account with all related personas and campaigns.
         */
        get: operations["get_account_with_relations_api_accounts__account_id__relations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/personas/generate-ai": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * AI Generate Target Persona Profile (attributes, buying signals, rationale)
         * @description AI-generate a target persona profile for authenticated users (Stack Auth JWT required).
         */
        post: operations["prod_generate_target_persona_api_personas_generate_ai_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/personas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Personas
         * @description Get all personas for an account.
         */
        get: operations["get_personas_api_personas_get"];
        put?: never;
        /**
         * Create Persona
         * @description Create a new persona for an account.
         */
        post: operations["create_persona_api_personas_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/personas/{persona_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Persona
         * @description Get a specific persona by ID.
         */
        get: operations["get_persona_api_personas__persona_id__get"];
        /**
         * Update Persona
         * @description Update a persona.
         */
        put: operations["update_persona_api_personas__persona_id__put"];
        post?: never;
        /**
         * Delete Persona
         * @description Delete a persona and all related campaigns.
         */
        delete: operations["delete_persona_api_personas__persona_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/personas/{persona_id}/relations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Persona With Relations
         * @description Get a persona with all related campaigns.
         */
        get: operations["get_persona_with_relations_api_personas__persona_id__relations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/campaigns/positioning": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate Unique Insight and Unique Selling Points */
        post: operations["generate_positioning_api_campaigns_positioning_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/campaigns/generate-ai": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * AI Generate Email Campaign
         * @description AI-generate a personalized email campaign based on company context, target account/persona, and user preferences.
         */
        post: operations["generate_email_api_campaigns_generate_ai_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/campaigns/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Campaigns
         * @description Get all campaigns for an account.
         *
         *     - **account_id**: Account ID (must be owned by authenticated user via company)
         *     - **persona_id**: Optional persona ID to filter campaigns
         *     - **skip**: Number of campaigns to skip (for pagination)
         *     - **limit**: Maximum number of campaigns to return (1-1000)
         */
        get: operations["get_campaigns_api_campaigns__get"];
        put?: never;
        /**
         * Create Campaign
         * @description Create a new campaign for an account and persona.
         *
         *     - **account_id**: Account ID (must be owned by authenticated user via company)
         *     - **persona_id**: Persona ID (must belong to the account)
         *     - **name**: Campaign name (required, max 255 chars)
         *     - **campaign_type**: Campaign type (email, linkedin, cold_call, ad)
         *     - **campaign_data**: JSON data with subject_line, content, segments, etc.
         */
        post: operations["create_campaign_api_campaigns__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/campaigns/{campaign_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Campaign
         * @description Get a specific campaign by ID.
         *
         *     Only returns campaigns owned by the authenticated user (via account->company).
         */
        get: operations["get_campaign_api_campaigns__campaign_id__get"];
        /**
         * Update Campaign
         * @description Update a campaign.
         *
         *     Only updates campaigns owned by the authenticated user (via account->company).
         *     All fields are optional - only provided fields will be updated.
         */
        put: operations["update_campaign_api_campaigns__campaign_id__put"];
        post?: never;
        /**
         * Delete Campaign
         * @description Delete a campaign.
         *
         *     Only deletes campaigns owned by the authenticated user (via account->company).
         */
        delete: operations["delete_campaign_api_campaigns__campaign_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Signup
         * @description Create a new user account with an API key.
         */
        post: operations["signup_api_auth_signup_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate Api Key */
        post: operations["validate_api_key_api_auth_validate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Profile */
        get: operations["get_user_profile_api_auth_profile_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/api-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Api Key */
        post: operations["create_api_key_api_auth_api_keys_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/api-keys/{key_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Api Key */
        delete: operations["delete_api_key_api_auth_api_keys__key_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/neon-auth/sync-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync Neon Auth User
         * @description Sync a Neon Auth user to our local user table.
         *     Called when a Neon Auth user first accesses the API.
         */
        post: operations["sync_neon_auth_user_api_neon_auth_sync_user_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/neon-auth/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Profile
         * @description Get user profile information and API keys for authenticated Neon Auth user.
         */
        get: operations["get_user_profile_api_neon_auth_profile_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/demo/companies/generate-ai": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * [DEMO] AI Generate Company Overview (features, company & persona profiles, pricing)
         * @description AI-generate a company overview for demo users, with IP-based rate limiting.
         */
        post: operations["demo_generate_product_overview_demo_companies_generate_ai_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/demo/accounts/generate-ai": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * [DEMO] AI Generate Target Account Profile (discovery call preparation)
         * @description AI-generate a target account profile for demo users, with IP-based rate limiting.
         */
        post: operations["demo_generate_target_account_demo_accounts_generate_ai_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/demo/personas/generate-ai": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * [DEMO] AI Generate Target Persona Profile (attributes, buying signals, rationale)
         * @description AI-generate a target persona profile for demo users, with IP-based rate limiting.
         */
        post: operations["demo_generate_target_persona_demo_personas_generate_ai_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/demo/campaigns/generate-ai": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * [DEMO] AI Generate Email Campaign
         * @description AI-generate a personalized email campaign for demo users, with IP-based rate limiting.
         */
        post: operations["demo_generate_email_demo_campaigns_generate_ai_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health Check */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** APIKeyValidationResponse */
        APIKeyValidationResponse: {
            /** Valid */
            valid: boolean;
            /** User Id */
            user_id?: string | null;
            /** Email */
            email?: string | null;
            /** Name */
            name?: string | null;
            /** Tier */
            tier?: string | null;
            /** Rate Limit Exempt */
            rate_limit_exempt?: boolean | null;
            /** Created At */
            created_at?: string | null;
            /** Last Used */
            last_used?: string | null;
        };
        /**
         * AccountCreate
         * @description Schema for creating a new account.
         * @example {
         *       "account_data": {
         *         "buying_signals": [
         *           {
         *             "description": "Companies actively hiring developers indicating growth",
         *             "detection_method": "LinkedIn job postings, company announcements",
         *             "priority": "High",
         *             "title": "Recent engineering hiring",
         *             "type": "Company Data"
         *           },
         *           {
         *             "description": "Recent adoption of modern development tools",
         *             "detection_method": "GitHub repos, job descriptions, tech stack data",
         *             "priority": "Medium",
         *             "title": "DevOps tool adoption",
         *             "type": "Tech Stack"
         *           }
         *         ],
         *         "firmographics": {
         *           "employees": "50-500",
         *           "funding_stage": [
         *             "Series A",
         *             "Series B",
         *             "Series C"
         *           ],
         *           "geography": [
         *             "North America",
         *             "Europe"
         *           ],
         *           "industry": [
         *             "Software",
         *             "SaaS",
         *             "Technology"
         *           ],
         *           "keywords": [
         *             "rapid growth",
         *             "scaling team",
         *             "CI/CD",
         *             "automation",
         *             "developer productivity"
         *           ],
         *           "revenue": "$5M-$50M"
         *         },
         *         "rationale": [
         *           "Mid-market companies have complex workflows but limited resources",
         *           "Growing teams need better automation to maintain velocity",
         *           "Budget available for tools that improve developer productivity"
         *         ]
         *       },
         *       "name": "Mid-market SaaS Companies"
         *     }
         */
        AccountCreate: {
            /** Name */
            name: string;
            /**
             * Account Data
             * @description Account data including firmographics, buying signals, rationale, metadata
             */
            account_data: {
                [key: string]: unknown;
            };
        };
        /**
         * AccountResponse
         * @description Schema for account responses.
         */
        AccountResponse: {
            /** Name */
            name: string;
            /**
             * Account Data
             * @description Account data including firmographics, buying signals, rationale, metadata
             */
            account_data: {
                [key: string]: unknown;
            };
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Company Id
             * Format: uuid4
             */
            company_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * AccountUpdate
         * @description Schema for updating account information.
         */
        AccountUpdate: {
            /** Name */
            name?: string | null;
            /** Account Data */
            account_data?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * AccountWithRelations
         * @description Account schema with related personas and campaigns.
         */
        AccountWithRelations: {
            /** Name */
            name: string;
            /**
             * Account Data
             * @description Account data including firmographics, buying signals, rationale, metadata
             */
            account_data: {
                [key: string]: unknown;
            };
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Company Id
             * Format: uuid4
             */
            company_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Personas
             * @default []
             */
            personas: components["schemas"]["PersonaResponse"][];
            /**
             * Campaigns
             * @default []
             */
            campaigns: components["schemas"]["CampaignResponse"][];
        };
        /** BusinessProfile */
        BusinessProfile: {
            /**
             * Category
             * @description 5-6 words on product category
             */
            category: string;
            /**
             * Business Model
             * @description 1-2 sentences on revenue streams and pricing
             */
            business_model: string;
            /**
             * Existing Customers
             * @description 1-3 sentences on customer evidence
             */
            existing_customers: string;
        };
        /** BuyingSignal */
        BuyingSignal: {
            /**
             * Title
             * @description Concise signal name (3-5 words)
             */
            title: string;
            /**
             * Description
             * @description 1-2 sentences explaining why this signal indicates buying readiness
             */
            description: string;
            /**
             * Type
             * @description Company Data|Website|Tech Stack|News|Social Media|Other
             */
            type: string;
            /** @description Low|Medium|High */
            priority: components["schemas"]["PriorityEnum"];
            /**
             * Detection Method
             * @description Specific Clay enrichment or data source
             */
            detection_method: string;
        };
        /**
         * CampaignCreate
         * @description Schema for creating a new campaign.
         * @example {
         *       "campaign_data": {
         *         "alternatives": {
         *           "subject_lines": [
         *             "Scaling your engineering team at {{company}}?",
         *             "How {{company}} can ship code 40% faster"
         *           ]
         *         },
         *         "configuration": {
         *           "length": "short",
         *           "personalization": "high",
         *           "tone": "professional"
         *         },
         *         "content": "Hi {{name}}, I noticed {{company}} has been growing rapidly...",
         *         "segments": [
         *           {
         *             "text": "Hi {{name}}",
         *             "type": "greeting"
         *           },
         *           {
         *             "text": "I noticed {{company}} has been growing rapidly and hiring more developers",
         *             "type": "opening"
         *           },
         *           {
         *             "text": "As teams scale, manual code reviews and slow CI/CD pipelines often become major bottlenecks",
         *             "type": "pain-point"
         *           },
         *           {
         *             "text": "TechFlow's AI-powered automation platform helps engineering teams like yours maintain velocity while improving code quality",
         *             "type": "solution"
         *           },
         *           {
         *             "text": "We've helped 50+ similar companies reduce their build times by 40% and speed up code reviews by 60%",
         *             "type": "evidence"
         *           },
         *           {
         *             "text": "Would you be open to a 15-minute demo to see how this could work for your team?",
         *             "type": "cta"
         *           }
         *         ],
         *         "subject_line": "Quick question about your development workflow"
         *       },
         *       "campaign_type": "email",
         *       "name": "Q4 VP Engineering Outreach"
         *     }
         */
        CampaignCreate: {
            /** Name */
            name: string;
            /**
             * Campaign Type
             * @description Campaign type: email, linkedin, cold_call, ad
             */
            campaign_type: string;
            /**
             * Campaign Data
             * @description Campaign data including subject_line, content, segments, alternatives, configuration
             */
            campaign_data: {
                [key: string]: unknown;
            };
        };
        /**
         * CampaignResponse
         * @description Schema for campaign responses.
         */
        CampaignResponse: {
            /** Name */
            name: string;
            /**
             * Campaign Type
             * @description Campaign type: email, linkedin, cold_call, ad
             */
            campaign_type: string;
            /**
             * Campaign Data
             * @description Campaign data including subject_line, content, segments, alternatives, configuration
             */
            campaign_data: {
                [key: string]: unknown;
            };
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Account Id
             * Format: uuid4
             */
            account_id: string;
            /**
             * Persona Id
             * Format: uuid4
             */
            persona_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * CampaignUpdate
         * @description Schema for updating campaign information.
         */
        CampaignUpdate: {
            /** Name */
            name?: string | null;
            /** Campaign Type */
            campaign_type?: string | null;
            /** Campaign Data */
            campaign_data?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * CompanyCreate
         * @description Schema for creating a new company.
         * @example {
         *       "analysis_data": {
         *         "business_profile": {
         *           "business_model": "Monthly/annual subscriptions with tiered pricing",
         *           "category": "B2B SaaS workflow automation",
         *           "existing_customers": "50+ software companies using the platform"
         *         },
         *         "capabilities": [
         *           "Automated code review workflows",
         *           "CI/CD pipeline optimization",
         *           "Team collaboration tools",
         *           "Performance analytics dashboard"
         *         ],
         *         "description": "AI-powered workflow automation platform for software teams",
         *         "positioning": {
         *           "key_market_belief": "Manual dev processes are the biggest bottleneck in software delivery",
         *           "unique_approach": "AI-driven automation that learns from team patterns"
         *         }
         *       },
         *       "name": "TechFlow Solutions",
         *       "url": "https://techflowsolutions.com"
         *     }
         */
        CompanyCreate: {
            /** Name */
            name: string;
            /** Url */
            url: string;
            /** Analysis Data */
            analysis_data?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * CompanyResponse
         * @description Schema for company responses.
         */
        CompanyResponse: {
            /** Name */
            name: string;
            /** Url */
            url: string;
            /** Analysis Data */
            analysis_data?: {
                [key: string]: unknown;
            } | null;
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * User Id
             * Format: uuid4
             */
            user_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * CompanyUpdate
         * @description Schema for updating company information.
         * @example {
         *       "analysis_data": {
         *         "description": "Updated: AI-powered workflow automation platform for software teams",
         *         "last_updated": "2024-Q4"
         *       },
         *       "name": "TechFlow Solutions (Updated)"
         *     }
         */
        CompanyUpdate: {
            /** Name */
            name?: string | null;
            /** Url */
            url?: string | null;
            /** Analysis Data */
            analysis_data?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * CompanyWithRelations
         * @description Company schema with related accounts.
         */
        CompanyWithRelations: {
            /** Name */
            name: string;
            /** Url */
            url: string;
            /** Analysis Data */
            analysis_data?: {
                [key: string]: unknown;
            } | null;
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * User Id
             * Format: uuid4
             */
            user_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Accounts
             * @default []
             */
            accounts: components["schemas"]["AccountResponse"][];
        };
        /** ConfidenceAssessment */
        ConfidenceAssessment: {
            /**
             * Overall Confidence
             * @description high|medium|low
             */
            overall_confidence: string;
            /**
             * Data Quality
             * @description high|medium|low
             */
            data_quality: string;
            /**
             * Inference Level
             * @description minimal|moderate|significant
             */
            inference_level: string;
            /**
             * Recommended Improvements
             * @description What additional data would help
             */
            recommended_improvements: string[];
        };
        /** CreateAPIKeyResponse */
        CreateAPIKeyResponse: {
            /** Api Key */
            api_key: string;
            /** Key Prefix */
            key_prefix: string;
            /** Name */
            name: string;
            /** Tier */
            tier: string;
            /** Message */
            message: string;
        };
        /**
         * Demographics
         * @description Demographics model for target persona.
         */
        Demographics: {
            /**
             * Job Titles
             * @description 2-4 likely job titles this person would hold
             */
            job_titles: string[];
            /**
             * Departments
             * @description The department(s) they likely belong to
             */
            departments: string[];
            /**
             * Seniority
             * @description Seniority levels: Entry|C-Suite|Senior Manager|Manager|VP|Founder/CEO
             */
            seniority: string[];
            /**
             * Buying Roles
             * @description Buying roles: Technical Buyers|Economic Buyers|Decision Maker|Champion|End-User|Blocker|Executive Sponsor|Legal and Compliance|Budget Holder
             */
            buying_roles: string[];
            /**
             * Job Description Keywords
             * @description 3-5 key words expected in job description describing day-to-day activities
             */
            job_description_keywords: string[];
        };
        /**
         * EmailGenerationMetadata
         * @description Metadata about the email generation process.
         */
        EmailGenerationMetadata: {
            /**
             * Generation Id
             * @description Unique identifier for this generation
             */
            generation_id: string;
            /**
             * Confidence
             * @description Confidence level for email quality: high|medium|low
             */
            confidence: string;
            /**
             * Personalization Level
             * @description Level of personalization achieved: high|medium|low
             */
            personalization_level: string;
            /**
             * Processing Time Ms
             * @description Time taken to generate email in milliseconds
             */
            processing_time_ms?: number | null;
        };
        /**
         * EmailGenerationRequest
         * @description Request model for email generation API.
         */
        EmailGenerationRequest: {
            /**
             * Company Context
             * @description Company overview from localStorage dashboard_overview
             */
            company_context?: {
                [key: string]: unknown;
            } | null;
            /**
             * Target Account
             * @description Selected target account from wizard step 1
             */
            target_account?: {
                [key: string]: unknown;
            } | null;
            /**
             * Target Persona
             * @description Selected target persona from wizard step 1
             */
            target_persona?: {
                [key: string]: unknown;
            } | null;
            /**
             * Preferences
             * @description User preferences from wizard steps 2-3
             */
            preferences?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * EmailGenerationResponse
         * @description Response model for email generation API.
         */
        EmailGenerationResponse: {
            /** @description Generated subject lines */
            subjects: components["schemas"]["EmailSubjects"];
            /**
             * Email Body
             * @description Email content broken into structured segments
             */
            email_body: components["schemas"]["EmailSegment"][];
            /**
             * Breakdown
             * @description Flexible segment breakdown for UI rendering - maps segment types to {label, description, color}
             */
            breakdown: {
                [key: string]: {
                    [key: string]: string;
                };
            };
            /** @description Generation metadata and quality metrics */
            metadata: components["schemas"]["EmailGenerationMetadata"];
        };
        /**
         * EmailSegment
         * @description Individual email segment with type classification.
         */
        EmailSegment: {
            /**
             * Text
             * @description The text content of this email segment
             */
            text: string;
            /**
             * Type
             * @description Segment type: greeting|opening|pain-point|solution|evidence|cta|signature
             */
            type: string;
        };
        /**
         * EmailSubjects
         * @description Generated email subjects with primary and alternatives.
         */
        EmailSubjects: {
            /**
             * Primary
             * @description Most effective subject line
             */
            primary: string;
            /**
             * Alternatives
             * @description 2 alternative subject lines
             */
            alternatives: string[];
        };
        /** Firmographics */
        Firmographics: {
            /**
             * Industry
             * @description Exact industry names from Clay taxonomy
             */
            industry: string[];
            /**
             * Employees
             * @description Exact range (e.g., '50-500')
             */
            employees?: string | null;
            /**
             * Department Size
             * @description Relevant dept size if applicable
             */
            department_size?: string | null;
            /**
             * Revenue
             * @description Revenue range if relevant
             */
            revenue?: string | null;
            /**
             * Geography
             * @description Geographic markets if relevant
             */
            geography?: string[] | null;
            /**
             * Business Model
             * @description Clay-searchable business model keywords
             */
            business_model?: string[] | null;
            /**
             * Funding Stage
             * @description Exact funding stage names
             */
            funding_stage?: string[] | null;
            /**
             * Company Type
             * @description Public/Private/PE-backed etc.
             */
            company_type?: string[] | null;
            /**
             * Keywords
             * @description 3-5 sophisticated company description keywords that indicate implicit need - avoid obvious solution terms
             */
            keywords: string[];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** ICPHypothesis */
        ICPHypothesis: {
            /**
             * Target Account Hypothesis
             * @description Ideal customer profile
             */
            target_account_hypothesis: string;
            /**
             * Target Persona Hypothesis
             * @description Ideal stakeholder/decision-maker
             */
            target_persona_hypothesis: string;
        };
        /** ICPMetadata */
        ICPMetadata: {
            /**
             * Primary Context Source
             * @description user_input|company_context|website_content
             */
            primary_context_source: string;
            /**
             * Sources Used
             * @description List of context sources utilized
             */
            sources_used: string[];
            /** @description Confidence metrics */
            confidence_assessment: components["schemas"]["ConfidenceAssessment"];
            /**
             * Processing Notes
             * @description Any important notes about analysis approach
             */
            processing_notes?: string | null;
        };
        /** NeonAuthUserRequest */
        NeonAuthUserRequest: {
            /** Neon Auth User Id */
            neon_auth_user_id: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Name */
            name?: string | null;
        };
        /**
         * PersonaCreate
         * @description Schema for creating a new persona.
         * @example {
         *       "name": "VP of Engineering",
         *       "persona_data": {
         *         "demographics": {
         *           "buying_roles": [
         *             "Decision Maker",
         *             "Technical Buyer",
         *             "Economic Buyer"
         *           ],
         *           "departments": [
         *             "Engineering",
         *             "Technology"
         *           ],
         *           "job_description_keywords": [
         *             "team leadership",
         *             "technical strategy",
         *             "developer productivity",
         *             "scaling",
         *             "automation"
         *           ],
         *           "job_titles": [
         *             "VP Engineering",
         *             "Head of Engineering",
         *             "Engineering Director"
         *           ],
         *           "seniority": [
         *             "VP",
         *             "Director",
         *             "Senior Manager"
         *           ]
         *         },
         *         "goals": [
         *           "Improve team productivity and delivery speed",
         *           "Reduce technical debt and improve code quality",
         *           "Scale engineering processes as team grows",
         *           "Minimize time spent on manual, repetitive tasks"
         *         ],
         *         "objections": [
         *           "Concerned about integration complexity with existing tools",
         *           "Budget approval process may be lengthy",
         *           "Team resistance to changing established workflows"
         *         ],
         *         "use_cases": [
         *           {
         *             "capability": "AI-powered code review that catches issues early and provides instant feedback",
         *             "desired_outcome": "Faster development cycles with maintained code quality",
         *             "pain_points": "Manual code reviews slow down development cycles and create bottlenecks",
         *             "use_case": "Code review automation"
         *           },
         *           {
         *             "capability": "Intelligent pipeline optimization that reduces build times by 40%",
         *             "desired_outcome": "Reliable, fast deployments that don't block development",
         *             "pain_points": "Build pipelines are slow and unreliable, causing deployment delays",
         *             "use_case": "CI/CD optimization"
         *           }
         *         ]
         *       }
         *     }
         */
        PersonaCreate: {
            /** Name */
            name: string;
            /**
             * Persona Data
             * @description Persona data including demographics, use cases, buying signals, objections, goals
             */
            persona_data: {
                [key: string]: unknown;
            };
        };
        /**
         * PersonaResponse
         * @description Schema for persona responses.
         */
        PersonaResponse: {
            /** Name */
            name: string;
            /**
             * Persona Data
             * @description Persona data including demographics, use cases, buying signals, objections, goals
             */
            persona_data: {
                [key: string]: unknown;
            };
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Account Id
             * Format: uuid4
             */
            account_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * PersonaUpdate
         * @description Schema for updating persona information.
         */
        PersonaUpdate: {
            /** Name */
            name?: string | null;
            /** Persona Data */
            persona_data?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * PersonaWithRelations
         * @description Persona schema with related campaigns.
         */
        PersonaWithRelations: {
            /** Name */
            name: string;
            /**
             * Persona Data
             * @description Persona data including demographics, use cases, buying signals, objections, goals
             */
            persona_data: {
                [key: string]: unknown;
            };
            /**
             * Id
             * Format: uuid4
             */
            id: string;
            /**
             * Account Id
             * Format: uuid4
             */
            account_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Campaigns
             * @default []
             */
            campaigns: components["schemas"]["CampaignResponse"][];
        };
        /** Positioning */
        Positioning: {
            /**
             * Key Market Belief
             * @description Unique POV on why current solutions fail
             */
            key_market_belief: string;
            /**
             * Unique Approach
             * @description Differentiated value proposition
             */
            unique_approach: string;
            /**
             * Language Used
             * @description Terminology and mental models used
             */
            language_used: string;
        };
        /** PositioningResponse */
        PositioningResponse: {
            /**
             * Unique Insight
             * @description Core reframe of the problem (unique insight)
             */
            unique_insight: string;
            /**
             * Unique Selling Points
             * @description List of unique selling points (USPs)
             */
            unique_selling_points: components["schemas"]["UniqueSellingPoint"][];
        };
        /**
         * PriorityEnum
         * @enum {string}
         */
        PriorityEnum: "Low" | "Medium" | "High";
        /** ProductOverviewRequest */
        ProductOverviewRequest: {
            /**
             * Website Url
             * @description Company website or landing page URL
             */
            website_url: string;
            /**
             * User Inputted Context
             * @description Optional user-provided context for campaign generation
             */
            user_inputted_context?: string | null;
            /**
             * Company Context
             * @description Optional company context inferred from previous endpoints
             */
            company_context?: string | null;
        };
        /** ProductOverviewResponse */
        ProductOverviewResponse: {
            /**
             * Company Name
             * @description Official company name
             */
            company_name: string;
            /**
             * Company Url
             * @description Canonical website URL
             */
            company_url: string;
            /**
             * Description
             * @description 2-3 sentences on core identity and what they do
             */
            description: string;
            /** @description Business category, model, and customer evidence */
            business_profile: components["schemas"]["BusinessProfile"];
            /**
             * Capabilities
             * @description Key features and capabilities
             */
            capabilities: string[];
            /** @description Process impact and problems solved */
            use_case_analysis: components["schemas"]["UseCaseAnalysis"];
            /** @description Market positioning and differentiation */
            positioning: components["schemas"]["Positioning"];
            /**
             * Objections
             * @description Common objections and concerns
             */
            objections: string[];
            /** @description Target customer and persona hypothesis */
            icp_hypothesis: components["schemas"]["ICPHypothesis"];
            /**
             * Metadata
             * @description Analysis metadata and quality scores
             */
            metadata: {
                [key: string]: unknown;
            };
        };
        /** TargetAccountRequest */
        TargetAccountRequest: {
            /**
             * Website Url
             * @description Company website or landing page URL
             */
            website_url: string;
            /**
             * Account Profile Name
             * @description Name of the target account profile (e.g., 'Mid-market SaaS companies', 'Enterprise healthcare organizations')
             */
            account_profile_name?: string | null;
            /**
             * Hypothesis
             * @description User's hypothesis about why this account profile is ideal for the solution
             */
            hypothesis?: string | null;
            /**
             * Additional Context
             * @description Additional user-provided context for target account generation
             */
            additional_context?: string | null;
            /**
             * Company Context
             * @description Company context from previous endpoints (e.g., company/generate output)
             */
            company_context?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * TargetAccountResponse
         * @description Response model for the /customers/target_accounts endpoint
         *     (ICP analysis with Clay-ready filters).
         */
        TargetAccountResponse: {
            /**
             * Target Account Name
             * @description Short descriptive name for this customer segment
             */
            target_account_name: string;
            /**
             * Target Account Description
             * @description 1-2 sentences: who they are and why they need this solution
             */
            target_account_description: string;
            /**
             * Target Account Rationale
             * @description 3-5 bullets explaining the overall logic behind these targeting filters
             */
            target_account_rationale: string[];
            /** @description Clay-ready prospect filters */
            firmographics: components["schemas"]["Firmographics"];
            /**
             * Buying Signals
             * @description Detectable buying signals with specific data sources
             */
            buying_signals: components["schemas"]["BuyingSignal"][];
            /**
             * Buying Signals Rationale
             * @description 3-5 bullets explaining the overall logic behind these buying signal choices
             */
            buying_signals_rationale: string[];
            /** @description Analysis metadata and quality scores */
            metadata: components["schemas"]["ICPMetadata"];
        };
        /** TargetPersonaRequest */
        TargetPersonaRequest: {
            /**
             * Website Url
             * @description Company website or landing page URL
             */
            website_url: string;
            /**
             * Persona Profile Name
             * @description Name of the target persona profile (e.g., 'VP of Engineering', 'Head of Customer Success', 'IT Director')
             */
            persona_profile_name?: string | null;
            /**
             * Hypothesis
             * @description User's hypothesis about why this persona is ideal for the solution
             */
            hypothesis?: string | null;
            /**
             * Additional Context
             * @description Additional context or specifications about the target persona
             */
            additional_context?: string | null;
            /**
             * Company Context
             * @description Structured context about the analyzed company/product
             */
            company_context?: {
                [key: string]: unknown;
            } | null;
            /**
             * Target Account Context
             * @description Target account profile context - the ideal customer company type this persona works for
             */
            target_account_context?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * TargetPersonaResponse
         * @description Response model for the /customers/target_personas endpoint (matches new prompt output).
         */
        TargetPersonaResponse: {
            /**
             * Target Persona Name
             * @description Short descriptive name for this persona segment
             */
            target_persona_name: string;
            /**
             * Target Persona Description
             * @description 1-2 sentences: who they are and why they need this solution
             */
            target_persona_description: string;
            /**
             * Target Persona Rationale
             * @description 3-5 bullets explaining the overall logic behind targeting this persona
             */
            target_persona_rationale: string[];
            /** @description Demographics and targeting attributes */
            demographics: components["schemas"]["Demographics"];
            /**
             * Use Cases
             * @description 3-4 use cases following logical progression
             */
            use_cases: components["schemas"]["UseCase"][];
            /**
             * Buying Signals
             * @description Observable buying signals with detection methods
             */
            buying_signals: components["schemas"]["BuyingSignal"][];
            /**
             * Buying Signals Rationale
             * @description 3-5 bullets explaining buying signal logic
             */
            buying_signals_rationale: string[];
            /**
             * Objections
             * @description 3 bullets summarizing common concerns about adopting this solution
             */
            objections: string[];
            /**
             * Goals
             * @description 3-5 bullets explaining business objectives this product can help with
             */
            goals: string[];
            /**
             * Purchase Journey
             * @description 3-6 bullet points highlighting path from awareness to purchase
             */
            purchase_journey: string[];
            /**
             * Metadata
             * @description Analysis metadata and quality scores
             */
            metadata: {
                [key: string]: unknown;
            };
        };
        /** UniqueSellingPoint */
        UniqueSellingPoint: {
            /**
             * Theme
             * @description USP name or theme
             */
            theme: string;
            /**
             * Description
             * @description Brief benefit or outcome
             */
            description: string;
            /**
             * Evidence
             * @description Supporting details or explanations
             */
            evidence: string[];
        };
        /**
         * UseCase
         * @description Individual use case model for target persona.
         */
        UseCase: {
            /**
             * Use Case
             * @description 3-5 word description of the use case or workflow this product impacts
             */
            use_case: string;
            /**
             * Pain Points
             * @description 1 sentence description of the pain or inefficiency associated with this pain point
             */
            pain_points: string;
            /**
             * Capability
             * @description 1 sentence description of the capability the product has that can fix this pain point
             */
            capability: string;
            /**
             * Desired Outcome
             * @description The desired outcome the persona hopes to achieve using this product
             */
            desired_outcome: string;
        };
        /** UseCaseAnalysis */
        UseCaseAnalysis: {
            /**
             * Process Impact
             * @description Primary process/workflow this product impacts
             */
            process_impact: string;
            /**
             * Problems Addressed
             * @description Problems and inefficiencies solved
             */
            problems_addressed: string;
            /**
             * How They Do It Today
             * @description Current state/alternative approaches
             */
            how_they_do_it_today: string;
        };
        /** UserSignupRequest */
        UserSignupRequest: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Name */
            name?: string | null;
        };
        /** UserSignupResponse */
        UserSignupResponse: {
            /** User Id */
            user_id: string;
            /** Email */
            email: string;
            /** Name */
            name: string | null;
            /** Api Key */
            api_key: string;
            /** Message */
            message: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** UserProfileResponse */
        backend__app__api__routes__auth__UserProfileResponse: {
            /** User Id */
            user_id: string;
            /** Email */
            email: string;
            /** Name */
            name: string | null;
            /** Role */
            role: string;
            /** Rate Limit Exempt */
            rate_limit_exempt: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Last Login */
            last_login: string | null;
            /** Api Keys */
            api_keys: {
                [key: string]: unknown;
            }[];
        };
        /** UserProfileResponse */
        backend__app__api__routes__neon_auth__UserProfileResponse: {
            /** User Id */
            user_id: string;
            /** Neon Auth User Id */
            neon_auth_user_id: string | null;
            /** Email */
            email: string;
            /** Name */
            name: string | null;
            /** Role */
            role: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Last Login */
            last_login: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_companies_api_companies__get: {
        parameters: {
            query?: {
                /** @description Number of companies to skip */
                skip?: number;
                /** @description Maximum number of companies to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompanyResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_company_api_companies__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompanyCreate"];
            };
        };
        responses: {
            /** @description Company created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompanyResponse"];
                };
            };
            /** @description Company with this name already exists */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_company_api_companies__company_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                company_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompanyResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_company_api_companies__company_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                company_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompanyUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompanyResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_company_api_companies__company_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                company_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_company_with_relations_api_companies__company_id__relations_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                company_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompanyWithRelations"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    prod_generate_product_overview_api_companies_generate_ai_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductOverviewRequest"];
            };
        };
        responses: {
            /** @description A structured company overview for the given company context. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductOverviewResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    prod_generate_target_account_api_accounts_generate_ai_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TargetAccountRequest"];
            };
        };
        responses: {
            /** @description A structured discovery call preparation report with company analysis and ICP hypothesis. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TargetAccountResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_accounts_api_accounts_get: {
        parameters: {
            query: {
                /** @description Company ID to get accounts for */
                company_id: string;
                /** @description Number of accounts to skip */
                skip?: number;
                /** @description Maximum number of accounts to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_account_api_accounts_post: {
        parameters: {
            query: {
                /** @description Company ID to create account for */
                company_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccountCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_account_api_accounts__account_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_account_api_accounts__account_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccountUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_account_api_accounts__account_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_account_with_relations_api_accounts__account_id__relations_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountWithRelations"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    prod_generate_target_persona_api_personas_generate_ai_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TargetPersonaRequest"];
            };
        };
        responses: {
            /** @description A structured target persona profile for the given company context. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TargetPersonaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_personas_api_personas_get: {
        parameters: {
            query: {
                /** @description Account ID to get personas for */
                account_id: string;
                /** @description Number of personas to skip */
                skip?: number;
                /** @description Maximum number of personas to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_persona_api_personas_post: {
        parameters: {
            query: {
                /** @description Account ID to create persona for */
                account_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_persona_api_personas__persona_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                persona_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_persona_api_personas__persona_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                persona_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonaUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_persona_api_personas__persona_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                persona_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_persona_with_relations_api_personas__persona_id__relations_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                persona_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PersonaWithRelations"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_positioning_api_campaigns_positioning_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description A unique insight and a list of unique selling points for the given company context. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PositioningResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_email_api_campaigns_generate_ai_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailGenerationRequest"];
            };
        };
        responses: {
            /** @description A complete email campaign with subjects, body segments, and breakdown metadata. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailGenerationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_campaigns_api_campaigns__get: {
        parameters: {
            query: {
                /** @description Account ID to get campaigns for */
                account_id: string;
                /** @description Optional persona ID to filter by */
                persona_id?: string | null;
                /** @description Number of campaigns to skip */
                skip?: number;
                /** @description Maximum number of campaigns to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_campaign_api_campaigns__post: {
        parameters: {
            query: {
                /** @description Account ID to create campaign for */
                account_id: string;
                /** @description Persona ID to create campaign for */
                persona_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CampaignCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_campaign_api_campaigns__campaign_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_campaign_api_campaigns__campaign_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CampaignUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_campaign_api_campaigns__campaign_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                campaign_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    signup_api_auth_signup_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserSignupRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSignupResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_api_key_api_auth_validate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIKeyValidationResponse"];
                };
            };
        };
    };
    get_user_profile_api_auth_profile_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["backend__app__api__routes__auth__UserProfileResponse"];
                };
            };
        };
    };
    create_api_key_api_auth_api_keys_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateAPIKeyResponse"];
                };
            };
        };
    };
    delete_api_key_api_auth_api_keys__key_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    sync_neon_auth_user_api_neon_auth_sync_user_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NeonAuthUserRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_profile_api_neon_auth_profile_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["backend__app__api__routes__neon_auth__UserProfileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    demo_generate_product_overview_demo_companies_generate_ai_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductOverviewRequest"];
            };
        };
        responses: {
            /** @description A structured company overview for the given company context. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductOverviewResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    demo_generate_target_account_demo_accounts_generate_ai_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TargetAccountRequest"];
            };
        };
        responses: {
            /** @description A structured discovery call preparation report with company analysis and ICP hypothesis. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TargetAccountResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    demo_generate_target_persona_demo_personas_generate_ai_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TargetPersonaRequest"];
            };
        };
        responses: {
            /** @description A structured target persona profile for the given company context. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TargetPersonaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    demo_generate_email_demo_campaigns_generate_ai_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailGenerationRequest"];
            };
        };
        responses: {
            /** @description A complete email campaign with subjects, body segments, and breakdown metadata. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailGenerationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
